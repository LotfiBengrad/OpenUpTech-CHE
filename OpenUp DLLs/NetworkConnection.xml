<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NetworkConnection</name>
    </assembly>
    <members>
        <member name="F:OpenUp.Networking.ConnectionLoggingOptions.types">
            <summary>
            Filters out unwanted message types.
            </summary>
        </member>
        <member name="F:OpenUp.Networking.ConnectionLoggingOptions.whiteList">
            <summary>
            If set to true, <see cref="F:OpenUp.Networking.ConnectionLoggingOptions.types"/> filters out all message types not in that set,
            if set to false, <see cref="F:OpenUp.Networking.ConnectionLoggingOptions.types"/> filter out all message types in that set.
            </summary>
        </member>
        <member name="F:OpenUp.Networking.ConnectionLoggingOptions.messageSize">
            <summary>
            If true, also logs the message size.
            </summary>
        </member>
        <member name="M:OpenUp.Networking.ConnectionLoggingOptions.ShouldLog(OpenUp.Networking.BinaryMessageType)">
            <summary>
            Bool that tells whether a message type should be logged according to these options.
            </summary>
            <param name="messageType"></param>
            <returns></returns>
        </member>
        <member name="T:OpenUp.Networking.Connection.ByteFrame">
            <summary>
            Messages get batched into a single frame and sent one frame at a time.
            </summary>
        </member>
        <member name="F:OpenUp.Networking.Connection.Call">
            <summary>
            This object holds all the server method calls.
            </summary>
        </member>
        <member name="F:OpenUp.Networking.Connection.Handler">
            <summary>
            This must be assigned for the connection to be able method calls made to it.
            </summary>
        </member>
        <member name="F:OpenUp.Networking.Connection.loggingOptions">
            <summary>
            Set what gets logged by the connection
            </summary>
        </member>
        <member name="M:OpenUp.Networking.Connection.#ctor(System.Net.WebSockets.WebSocket)">
            <summary>
            Creates a connection object that handles session synchronization
            and method calls.
            </summary>
            <param name="socket">The websocket that is used to transmit the data.</param>
        </member>
        <member name="M:OpenUp.Networking.Connection.Close">
            <summary>
            Close the connection
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenUp.Networking.Connection.SendMessage(OpenUp.Networking.BinaryMessageType,OpenUp.Utils.IWritableToBytes,System.Boolean)">
            <summary>
            Sends a message along this connection.
            </summary>
            <param name="messageType">The type of message to send.</param>
            <param name="content">The content to send.</param>
            <param name="lowPriority">Use this for messages that can be skipped</param>
            <returns></returns>
        </member>
        <member name="M:OpenUp.Networking.Connection.SendMessage``1(OpenUp.Networking.BinaryMessageType,``0,System.Boolean)">
            <summary>
            Helper method to send a simple struct across the connection
            </summary>
            <param name="messageType"></param>
            <param name="content"></param>
            <param name="lowPriority"></param>
            <typeparam name="T">The struct type</typeparam>
            <returns></returns>
        </member>
        <member name="M:OpenUp.Networking.Connection.SendMessage(OpenUp.Networking.BinaryMessageType,System.String,System.Boolean)">
            <summary>
            Helper method to send a string across the connection
            </summary>
            <param name="messageType"></param>
            <param name="content"></param>
            <param name="lowPriority"></param>
            <returns></returns>
        </member>
        <member name="M:OpenUp.Networking.Connection.SendMessage(OpenUp.Networking.BinaryMessageType,System.ArraySegment{System.Byte},System.Boolean)">
            <summary>
            Sends some binary data along the connection.
            </summary>
            <param name="messageType"></param>
            <param name="content"></param>
            <param name="lowPriority"></param>
            <returns></returns>
        </member>
        <member name="M:OpenUp.Networking.Connection.SendFrame">
            <summary>
            Sends all messages accrued across the websocket. If another frame is being sent then this operation
            returns without sending.
            </summary>
            <remarks>
            Messages are batched together, this method sends the current batch and creates a new batch
            that messages get added to.
            </remarks>
            <returns>An awaitable task.</returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="T:OpenUp.Networking.PermissionDeniedException">
            <summary>
            Exception thrown when a user is denied permission to perform a certain action
            </summary>
        </member>
        <member name="T:OpenUp.Networking.LogMessages.ServerLogMessage">
            <summary>
            Server logs as stored in the database
            </summary>
        </member>
        <member name="T:OpenUp.Networking.ServerCalls.LoginResult">
            <summary>
            Structure that holds  the result of a login attempt.
            </summary>
        </member>
        <member name="P:OpenUp.Networking.ServerCalls.LoginResult.resumeToken">
            <summary>
            This token can be used in combination with <see cref="M:OpenUp.Networking.ServerCalls.IServerCallMethods.LogInWithToken(System.String)"/>
            to continue a session without needing to give a password.
            </summary>
        </member>
        <member name="P:OpenUp.Networking.ServerCalls.LoginResult.errorMessage">
            <summary>
            A short message describing why the login failed.
            </summary>
        </member>
        <member name="P:OpenUp.Networking.ServerCalls.LoginResult.errorDetails">
            <summary>
            Verbose message why the login failed.
            </summary>
        </member>
        <member name="P:OpenUp.Networking.ServerCalls.LoginResult.user">
            <summary>
            The user that logged in, if login was successful.
            </summary>
        </member>
        <member name="T:OpenUp.Networking.ServerCalls.IServerCallMethods">
            <summary>
            This interface declares all methods that can be called to the server.
            </summary>
            <summary>
            This interface declares all methods that can be called to the server.
            </summary>
            <summary>
            This interface declares all methods that can be called to the server.
            </summary>
            <summary>
            This interface declares all methods that can be called to the server.
            </summary>
            <summary>
            This interface declares all methods that can be called to the server.
            </summary>
        </member>
        <member name="M:OpenUp.Networking.ServerCalls.IServerCallMethods.LogInWithPassword(System.String,System.String)">
            <summary>
            Log in using a username and a password.
            </summary>
            <param name="username">The username or the email used to sign up.</param>
            <param name="passwordHashed">The SHA256 hash of the password</param>
            <returns></returns>
        </member>
        <member name="M:OpenUp.Networking.ServerCalls.IServerCallMethods.LogInWithToken(System.String)">
            <summary>
            Log in using a resume token given by the server.
            </summary>
            <param name="token">The token given for the resume.</param>
            <returns></returns>
        </member>
        <member name="M:OpenUp.Networking.ServerCalls.IServerCallMethods.LogOut">
            <summary>
            Logs out the current user.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenUp.Networking.ServerCalls.IServerCallMethods.ListAllApps">
            <summary>
            Returns a list of all apps that the current user can edit/play.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenUp.Networking.ServerCalls.IServerCallMethods.ListSessions(System.String)">
            <summary>
            Returns a list of all Sessions that are currently active on the server.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenUp.Networking.ServerCalls.IServerCallMethods.ListActiveSessions">
            <summary>
            Returns a list of all sessions that are active in the server.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenUp.Networking.ServerCalls.IServerCallMethods.SaveApp">
            <summary>
            Saves the current app to the database.
            </summary>
            <returns>An exception is returned if the saving failed, otherwise the return is null</returns>
        </member>
        <member name="M:OpenUp.Networking.ServerCalls.IServerCallMethods.GetS3SigningURL(System.String,System.String)">
            <summary>
            Request a signed upload URL.
            </summary>
            <param name="key">The key to use for the upload.</param>
            <param name="type">Data type of the upload. Optional, defaults to "binary".</param>
            <returns>The signed url as a string</returns>
            <remarks>The provided url will only have a limited lifetime before it expires.</remarks>
        </member>
        <member name="M:OpenUp.Networking.ServerCalls.IServerCallMethods.RequestEditPermission(OpenUp.Updating.UpdatePath)">
            <summary>
            Tells the server you want to be able to edit anything under
            the given path.
            </summary>
            <param name="path"></param>
            <returns>True if permission is granted, otherwise false</returns>
            <remarks>
            This has been added so that only one client can edit any specific part of the data,
            avoiding conflicting edits.
            </remarks>
            <remarks>
            You can only have permission for one path at a time.
            </remarks>
        </member>
        <member name="M:OpenUp.Networking.ServerCalls.IServerCallMethods.ReleaseEditPermission">
            <summary>
            Release this connection's claim to a part of the app data.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenUp.Networking.ServerCalls.IServerCallMethods.GetGooglePolyModels(System.String,System.Int32,System.String)">
            <summary>
            Fetches a list of Google poly models.
            </summary>
            <param name="searchTerm">The term used to search for models, separated by a space if multiple are used at once</param>
            <param name="count">The amount of models to return</param>
            <param name="pageToken">
            Used to find the next set of models with the same search term.
            If null, get first page of models (page size specified by <paramref name="count"/>).
            For later pages of the same search, specify the token returned by a previous call with the same
            <paramref name="searchTerm"/> and <paramref name="count"/>.
            </param>
            <returns>
            An instance of <see cref="T:OpenUp.Networking.ServerCalls.PolyModelList"/> containing a list of found models, and a token for the next page of the request, if any.
            </returns>
        </member>
        <member name="M:OpenUp.Networking.ServerCalls.IServerCallMethods.LDraw_AddStandardModel(OpenUp.DataStructures.LDraw.LDrawModel)">
            <summary>
            Adds a standard LDraw model to the database
            </summary>
            <param name="model">The <see cref="T:OpenUp.DataStructures.LDraw.LDrawModel"/> to be added</param>
            <returns>
            A <see cref="T:System.Exception"/> if something went wrong during the execution of the call, or null otherwise.
            </returns>
        </member>
        <member name="M:OpenUp.Networking.ServerCalls.IServerCallMethods.LDraw_FetchStandardModel(OpenUp.DataStructures.LDraw.SearchOptions)">
            <summary>
            Retrieves a list of standard models that matches a search term
            </summary>
            <param name="options">A <see cref="T:OpenUp.DataStructures.LDraw.SearchOptions"/> object containing the options to filter on.</param>
            <returns>
            A list of <see cref="T:OpenUp.DataStructures.LDraw.LDrawModel"/> objects that match the search string
            </returns>
        </member>
        <member name="M:OpenUp.Networking.ServerCalls.IServerCallMethods.LDraw_FetchStandardModelByID(System.String)">
            <summary>
            Retrieves a model by its file ID.
            </summary>
            <param name="ID">The file ID of the model you want to retrieve.</param>
            <returns>
            A <see cref="T:OpenUp.DataStructures.LDraw.LDrawModel"/> matching the specified ID.
            </returns>
        </member>
        <member name="M:OpenUp.Networking.ServerCalls.IServerCallMethods.GetServerLogs(System.DateTime,System.DateTime)">
            <summary>
            Retrieve a list of server log messages
            </summary>
            <param name="startDate">Minimum date in UTC. The server call will only return logs registered after this time.</param>
            <param name="endDate">
            Maximum date in UTC. The server call will only return logs registered between <paramref name="startDate"/> and this time.
            If omitted, will return all logs since <paramref name="startDate"/>.
            </param>
            <returns>
            A <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:OpenUp.Networking.LogMessages.ServerLogMessage"/> objects for the logs matching the specified timeperiod.
            </returns>
        </member>
        <member name="M:OpenUp.Networking.ServerCalls.IServerCallMethods.PreserveClientLog(System.String,System.Boolean)">
            <summary>
            Toggle the preserved attribute of a client session in the database
            </summary>
            <param name="id">The ID of the client session in the database</param>
            <param name="preserve">Whether or not to preserve the log</param>
        </member>
        <member name="M:OpenUp.Networking.ServerCalls.IServerCallMethods.SendCustomMessage(System.String,System.Byte[])">
            <summary>
            Use this method to send an arbitrary message across the connection.
            </summary>
            <param name="messageType">A unique name for the message type.</param>
            <param name="data">Data serialized to a single byte array.</param>
            <returns>The response serialized to a byte array.</returns>
            <remarks>
            Use the tools in <see cref="T:OpenUp.Utils.BinaryUtils"/> to quickly convert data to and from binary data.
            </remarks>
        </member>
        <member name="M:OpenUp.Networking.ServerCalls.IServerCallMethods.CreateOrganisation(OpenUp.Networking.ServerCalls.Organisation)">
            <summary>
            Create a new organisation
            </summary>
            <param name="organisation">An <see cref="T:OpenUp.Networking.ServerCalls.Organisation"/> object representing the new organistion.</param>
            <returns>
            A <see cref="T:System.Exception"/> if something went wrong during the execution of the call, or null otherwise.
            </returns>
            <remarks>
            Will overwrite the <paramref name="organisation"/>'s 'members' list server-side, so any existing values will be lost.
            </remarks>
        </member>
        <member name="M:OpenUp.Networking.ServerCalls.IServerCallMethods.DeleteOrganisation(System.String)">
            <summary>
            Remove an organisation from the database
            </summary>
            <param name="organisationID">The ID of the organisation to delete.</param>
            <returns>
            A <see cref="T:System.Exception"/> if something went wrong during the execution of the call, or null otherwise.
            </returns>
        </member>
        <member name="M:OpenUp.Networking.ServerCalls.IServerCallMethods.LeaveOrganisation(System.String,System.String)">
            <summary>
            Remove a user fron an organisation
            </summary>
            <param name="organisationID">The ID of the organisation.</param>
            <param name="userID">The ID of the user who wnats to leave.</param>
            <returns>
            A <see cref="T:System.Exception"/> if something went wrong during the execution of the call, or null otherwise.
            </returns>
        </member>
        <member name="M:OpenUp.Networking.ServerCalls.IServerCallMethods.InviteToOrganisation(System.String,System.String,System.String)">
            <summary>
            Invite a user to an organisation
            </summary>
            <param name="organisationID">The ID of the organisation.</param>
            <param name="userID">The ID of the user to invite.</param>
            <param name="message">Message to go along with the invite. Optional, will use a default message if omitted</param>
            <returns>
            A <see cref="T:System.Exception"/> if something went wrong during the execution of the call, or null otherwise.
            </returns>
        </member>
        <member name="M:OpenUp.Networking.ServerCalls.IServerCallMethods.OrganisationInviteResponse(System.String,System.Boolean)">
            <summary>
            Registers a user's response to an invitation to join an organisation
            </summary>
            <param name="organisationID">The ID of the organisation.</param>
            <param name="accepted">Whether or not the user accepted the invitation.</param>
            <returns>
            A <see cref="T:System.Exception"/> if something went wrong during the execution of the call, or null otherwise.
            </returns>
        </member>
        <member name="M:OpenUp.Networking.ServerCalls.IServerCallMethods.OrganisationSetRole(System.String,System.String,System.String)">
            <summary>
            Change the role for a member of an organisation
            </summary>
            <param name="organisationID">The ID of the organisation.</param>
            <param name="userID">The ID of the user whose role you want to change.</param>
            <param name="role">The name of the new role.</param>
            <returns>
            A <see cref="T:System.Exception"/> if something went wrong during the execution of the call, or null otherwise.
            </returns>
        </member>
        <member name="M:OpenUp.Networking.ServerCalls.IServerCallMethods.OrganisationTransferOwnership(System.String,System.String)">
            <summary>
            Transfer ownership of the organisation to another member (current owner becomes an admin)
            </summary>
            <param name="organisationID">The ID of the organisation.</param>
            <param name="userID">The ID of the user who will become the new owner.</param>
            <returns>
            A <see cref="T:System.Exception"/> if something went wrong during the execution of the call, or null otherwise.
            </returns>
        </member>
        <member name="M:OpenUp.Networking.ServerCalls.IServerCallMethods.RevokeOrganisationInvite(System.String,System.String)">
            <summary>
            Revoke a pending invite for a user to join an organisation
            </summary>
            <param name="organisationID">The ID of the organisation.</param>
            <param name="userID">The ID of the user whose invite should be revoked.</param>
            <returns>
            A <see cref="T:System.Exception"/> if something went wrong during the execution of the call, or null otherwise.
            </returns>
        </member>
        <member name="M:OpenUp.Networking.ServerCalls.IServerCallMethods.AddSceneShot(OpenUp.DataStructures.SceneShots.SceneShot)">
            <summary>
            Upserts a new scene shot to the database, replacing the existing scene shot for the app, or inserting if none exist yet.
            </summary>
            <param name="sceneShot">The <see cref="T:OpenUp.DataStructures.SceneShots.SceneShot"/> to be added.</param>
            <returns>
            An <see cref="T:System.Exception"/> if something went wrong during the execution of the call, or null otherwise.
            </returns>
        </member>
        <member name="M:OpenUp.Networking.ServerCalls.IServerCallMethods.UpdateSceneShot(MongoDB.Bson.ObjectId,OpenUp.DataStructures.SceneShots.SceneShot)">
            <summary>
            Replaces a scene shot in the database with a new one.
            </summary>
            <param name="id">The mongo document ID (NOT the appID) for the scene shot to replace.</param>
            <param name="sceneShot">A new <see cref="T:OpenUp.DataStructures.SceneShots.SceneShot"/> to replace the one matching the given <paramref name="id"/>.</param>
            <returns>
            An <see cref="T:System.Exception"/> if something went wrong during the execution of the call, or null otherwise.
            </returns>
        </member>
        <member name="M:OpenUp.Networking.ServerCalls.IServerCallMethods.FetchSceneShots(System.String)">
            <summary>
            Retrieves a list of scene shots from the database for the specified app.
            </summary>
            <param name="appID">The ID of the app to retrieve the scene shots of.</param>
            <returns>
            A <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:OpenUp.DataStructures.SceneShots.SceneShot"/> objects.
            </returns>
        </member>
        <member name="M:OpenUp.Networking.ServerCalls.IServerCallMethods.DeleteSceneShot(MongoDB.Bson.ObjectId)">
            <summary>
            Removes a scene shot from the database.
            </summary>
            <param name="id">The mongo document ID (NOT the appID) for the scene shot to delete.</param>
            <returns>
            An <see cref="T:System.Exception"/> if something went wrong during the execution of the call, or null otherwise.
            </returns>
        </member>
        <member name="M:OpenUp.Networking.ServerCalls.IServerCallMethods.GetAllShapes">
            <summary>
            Gets all known shapes from the server. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenUp.Networking.ServerCalls.IServerCallMethods.UpdateShape(OpenUp.Networking.ServerCalls.ShapeRef)">
            <summary>
            Sends a new shape to the server for a certain object.
            </summary>
            <param name="newShape">The new shape for an object</param>
            <returns></returns>
            <remarks>
            If the id is the same as an existing shape, that shape is replaced.
            </remarks>
        </member>
        <member name="M:OpenUp.Networking.ServerCalls.IServerCallMethods.ListTemplates">
            <summary>
            Fetches a list of all templates in the database.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenUp.Networking.ServerCalls.IServerCallMethods.CreateTemplate(OpenUp.Updating.Templating.Template)">
            <summary>
            Creates a new Template in the database
            </summary>
            <param name="template">The <see cref="T:OpenUp.Updating.Templating.Template"/> to be added.</param>
            <returns></returns>
        </member>
        <member name="M:OpenUp.Networking.ServerCalls.IServerCallMethods.ListMyAssets(System.String)">
            <summary>
            Retrieves the custom assets created by the current user.
            </summary>
            <param name="searchTerm">If specified, only returns assets that contain this string in their name.</param>
            <returns>
            A <see cref="T:System.Collections.Generic.List`1"/> containing instances of the <see cref="T:OpenUp.Networking.ServerCalls.Asset"/> struct.
            </returns>
        </member>
        <member name="M:OpenUp.Networking.ServerCalls.IServerCallMethods.AddMyAsset(OpenUp.Networking.ServerCalls.Asset)">
            <summary>
            Adds a new personal asset to the current user.
            </summary>
            <param name="asset">A <see cref="T:OpenUp.Networking.ServerCalls.Asset"/> representing the new asset to be added.</param>
            <returns>
            A <see cref="T:System.Exception"/> if something went wrong during the execution of the call, or null otherwise.
            </returns>
        </member>
        <member name="M:OpenUp.Networking.ServerCalls.IServerCallMethods.DeleteMyAsset(System.String)">
            <summary>
            Deletes a personal asset from the current user.
            </summary>
            <param name="assetID">A GUID in string form matching the asset to be deleted.</param>
            <returns>
            A <see cref="T:System.Exception"/> if something went wrong during the execution of the call, or null otherwise.
            </returns>
        </member>
        <member name="M:OpenUp.Networking.ServerCalls.IServerCallMethods.ListRecentAssets(System.String)">
            <summary>
            Retrieves the recently used assets for the current app by the current user.
            </summary>
            <param name="searchTerm">If specified, only returns assets that contain this string in their name.</param>
            <returns>
            A <see cref="T:System.Collections.Generic.List`1"/> containing instances of the <see cref="T:OpenUp.Networking.ServerCalls.Asset"/> struct.
            </returns>
        </member>
        <member name="M:OpenUp.Networking.ServerCalls.IServerCallMethods.AddRecentAsset(OpenUp.Networking.ServerCalls.Asset)">
            <summary>
            Adds an asset to the recently used list for the current user on the current app.
            </summary>
            <param name="asset">A <see cref="T:OpenUp.Networking.ServerCalls.Asset"/> representing the asset to be added.</param>
            <returns>
            A <see cref="T:System.Exception"/> if something went wrong during the execution of the call, or null otherwise.
            </returns>
        </member>
        <member name="T:OpenUp.Networking.ServerCalls.AppListItem">
            <summary>
            The data for an app that can be launched.
            </summary>
        </member>
        <member name="T:OpenUp.Networking.ServerCalls.SessionListItem">
            <summary>
            The data for a session that can be joined.
            </summary>
        </member>
        <member name="F:OpenUp.Networking.ServerCalls.CallMethod.CUSTOM_CALL">
            <summary>
            Used to extend the network api from the outside
            </summary>
            <remarks>This is a temporary fix to make the server more more extendable.</remarks>
            <remarks>Added on 08/12/2020, let's see how temporary it is.</remarks>
        </member>
        <member name="T:OpenUp.Networking.ServerCalls.PolyModelList">
            <summary>
            The return of a <see cref="M:OpenUp.Networking.ServerCalls.IServerCallMethods.GetGooglePolyModels(System.String,System.Int32,System.String)"/> call.
            </summary>
        </member>
        <member name="T:OpenUp.Networking.ServerCalls.MethodCaller">
            <summary>
            Use this to call methods on the server.
            </summary>
        </member>
        <member name="M:OpenUp.Networking.ServerCalls.MethodCaller.ListAllApps">
            <inheritdoc />
        </member>
        <member name="M:OpenUp.Networking.ServerCalls.MethodCaller.ListTemplates">
            <inheritdoc />
        </member>
        <member name="M:OpenUp.Networking.ServerCalls.MethodCaller.CreateTemplate(OpenUp.Updating.Templating.Template)">
            <inheritdoc />
        </member>
        <member name="M:OpenUp.Networking.ServerCalls.MethodCaller.ListSessions(System.String)">
            <inheritdoc />
        </member>
        <member name="M:OpenUp.Networking.ServerCalls.MethodCaller.ListActiveSessions">
            <inheritdoc />
        </member>
        <member name="M:OpenUp.Networking.ServerCalls.MethodCaller.GetGooglePolyModels(System.String,System.Int32,System.String)">
            <inheritdoc />
        </member>
        <member name="M:OpenUp.Networking.ServerCalls.MethodCaller.ListMyAssets(System.String)">
            <inheritdoc />
        </member>
        <member name="M:OpenUp.Networking.ServerCalls.MethodCaller.AddMyAsset(OpenUp.Networking.ServerCalls.Asset)">
            <inheritdoc />
        </member>
        <member name="M:OpenUp.Networking.ServerCalls.MethodCaller.DeleteMyAsset(System.String)">
            <inheritdoc />
        </member>
        <member name="M:OpenUp.Networking.ServerCalls.MethodCaller.ListRecentAssets(System.String)">
            <inheritdoc />
        </member>
        <member name="M:OpenUp.Networking.ServerCalls.MethodCaller.AddRecentAsset(OpenUp.Networking.ServerCalls.Asset)">
            <inheritdoc />
        </member>
        <member name="M:OpenUp.Networking.ServerCalls.MethodCaller.LogInWithPassword(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:OpenUp.Networking.ServerCalls.MethodCaller.LogInWithToken(System.String)">
            <inheritdoc />
        </member>
        <member name="M:OpenUp.Networking.ServerCalls.MethodCaller.CreateOrganisation(OpenUp.Networking.ServerCalls.Organisation)">
            <inheritdoc />
        </member>
        <member name="M:OpenUp.Networking.ServerCalls.MethodCaller.DeleteOrganisation(System.String)">
            <inheritdoc />
        </member>
        <member name="M:OpenUp.Networking.ServerCalls.MethodCaller.LeaveOrganisation(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:OpenUp.Networking.ServerCalls.MethodCaller.InviteToOrganisation(System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:OpenUp.Networking.ServerCalls.MethodCaller.OrganisationInviteResponse(System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:OpenUp.Networking.ServerCalls.MethodCaller.OrganisationSetRole(System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:OpenUp.Networking.ServerCalls.MethodCaller.OrganisationTransferOwnership(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:OpenUp.Networking.ServerCalls.MethodCaller.RevokeOrganisationInvite(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:OpenUp.Networking.ServerCalls.MethodCaller.GetS3SigningURL(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:OpenUp.Networking.ServerCalls.MethodCaller.LDraw_AddStandardModel(OpenUp.DataStructures.LDraw.LDrawModel)">
            <inheritdoc />
        </member>
        <member name="M:OpenUp.Networking.ServerCalls.MethodCaller.LDraw_FetchStandardModel(OpenUp.DataStructures.LDraw.SearchOptions)">
            <inheritdoc />
        </member>
        <member name="M:OpenUp.Networking.ServerCalls.MethodCaller.LDraw_FetchStandardModelByID(System.String)">
            <inheritdoc />
        </member>
        <member name="M:OpenUp.Networking.ServerCalls.MethodCaller.AddSceneShot(OpenUp.DataStructures.SceneShots.SceneShot)">
            <inheritdoc />
        </member>
        <member name="M:OpenUp.Networking.ServerCalls.MethodCaller.UpdateSceneShot(MongoDB.Bson.ObjectId,OpenUp.DataStructures.SceneShots.SceneShot)">
            <inheritdoc />
        </member>
        <member name="M:OpenUp.Networking.ServerCalls.MethodCaller.FetchSceneShots(System.String)">
            <inheritdoc />
        </member>
        <member name="M:OpenUp.Networking.ServerCalls.MethodCaller.DeleteSceneShot(MongoDB.Bson.ObjectId)">
            <inheritdoc />
        </member>
        <member name="T:OpenUp.Networking.ServerCalls.MethodHandler">
            <summary>
            This object handles the calls made to this connection.
            </summary>
        </member>
        <member name="F:OpenUp.Networking.ServerCalls.MethodHandler.HandlerImplementation">
            <summary>
            This object is used to do the actual logic for the calls.
            </summary>
        </member>
        <member name="T:OpenUp.Networking.ServerCalls.Organisation">
            <summary>
            Class representing an organisation from the database.
            </summary>
        </member>
        <member name="T:OpenUp.Networking.ServerCalls.Organisation.Profile">
            <summary>
            The profile of an <see cref="T:OpenUp.Networking.ServerCalls.Organisation"/>
            </summary>
        </member>
        <member name="T:OpenUp.Networking.ServerCalls.Organisation.Member">
            <summary>
            A member of an <see cref="T:OpenUp.Networking.ServerCalls.Organisation"/>
            </summary>
        </member>
        <member name="T:OpenUp.Networking.ServerCalls.Organisation.Invite">
            <summary>
            An invitation to join an <see cref="T:OpenUp.Networking.ServerCalls.Organisation"/>
            </summary>
        </member>
        <member name="T:OpenUp.Networking.ServerCalls.Asset">
            <summary>
            Class representing an asset from the database.
            </summary>
        </member>
        <member name="T:OpenUp.Networking.ServerCalls.RecentAssets">
            <summary>
            A user's recent assets for an app, containing the timestamp for the last update and a List of the used assets.
            </summary>
        </member>
        <member name="T:OpenUp.Networking.ISessionProvider">
            <summary>
            An implementor of this should be passed to <see cref="T:OpenUp.Networking.Connection"/> so that
            it can get whatever session it is trying to join/create.
            </summary>
        </member>
        <member name="T:OpenUp.Networking.OwnershipRegistry">
            <summary>
            Ownership is which client is in control of specific parts of the running application.
            </summary>
        </member>
        <member name="F:OpenUp.Networking.OwnershipRegistry.mainOwner">
            <summary>
            The main owner is the client that controls the main story.
            </summary>
        </member>
        <member name="F:OpenUp.Networking.OwnershipRegistry.detailedOwners">
            <summary>
            These are all the objects that are handled by clients other that the main owner.
            </summary>
        </member>
        <member name="P:OpenUp.Networking.OwnershipRegistry.Item(OpenUp.Updating.UpdatePath)">
            <summary>
            Set the owner for this path and triggers ownership granted.
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:OpenUp.Networking.OwnershipRegistry.OwnerOf(OpenUp.Updating.UpdatePath)">
            <summary>
            Gets the current owner of the given path.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:OpenUp.Networking.OwnershipRegistry.Clear">
            <summary>
            Clear out all ownership
            </summary>
        </member>
        <member name="E:OpenUp.Networking.OwnershipRegistry.OnOwnershipGranted">
            <summary>
            On server, invoked when a player is granted ownership and must be relayed to that player.
            On client, invoked when the client is given ownership of an object.
            </summary>
        </member>
        <member name="E:OpenUp.Networking.OwnershipRegistry.OnOwnershipRequested">
            <summary>
            On server, invoked when a player requests ownership and must be relayed to the current owning player.
            On client, invoked when an external client requests ownership of an object that the current client owns.
            </summary>
        </member>
        <member name="E:OpenUp.Networking.OwnershipRegistry.OnOwnershipDenied">
            <summary>
            On server, invoked when the current owning player denied ownership and must be relayed to the requesting player.
            On client, invoked when an external client denies ownership of an object that the current client wants to own.
            </summary>
        </member>
        <member name="T:OpenUp.Networking.PlayState">
            <summary>
            Indicates what state the loaded application is in
            </summary>
        </member>
        <member name="F:OpenUp.Networking.PlayState.NOT_CONNECTED">
            <summary>
            The app has not yet established a connection with the server
            </summary>
        </member>
        <member name="F:OpenUp.Networking.PlayState.EDITING">
            <summary>
            The App is being edited
            </summary>
        </member>
        <member name="F:OpenUp.Networking.PlayState.PLAYING">
            <summary>
            The app is being played
            </summary>
        </member>
        <member name="F:OpenUp.Networking.PlayState.PAUSED">
            <summary>
            The app is paused in some play state
            </summary>
        </member>
        <member name="F:OpenUp.Networking.PlayState.STOPPED">
            <summary>
            The app has been stopped
            </summary>
        </member>
        <member name="T:OpenUp.Networking.PermissionRegistry">
            <summary>
            Permission tracks what each client is trying to edit.
            </summary>
        </member>
        <member name="F:OpenUp.Networking.Session.baseApp">
            <summary>
            The appData before any updates are applied (used for undo methods).
            </summary>
        </member>
        <member name="M:OpenUp.Networking.Session.OpenUp#Utils#IWritableToBytes#ToBytes">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="T:OpenUp.Networking.SessionConnection">
            <summary>
            Connection class that handles large amounts of packages quickly.
            </summary>
        </member>
        <member name="T:OpenUp.Networking.SessionConnection.ResendCache">
            <summary>
            Holds <see cref="F:OpenUp.Networking.SessionConnection.ResendCache.MAX_CACHE_SIZE"/> messages to resend if there is an error in the connection.
            It knows which messages have been confirmed by the receiver and can return a collection
            of all unconfirmed messages.
            </summary>
        </member>
        <member name="M:OpenUp.Networking.SessionConnection.ResendCache.Add(System.Byte[])">
            <summary>
            Stores a message in the cache.
            </summary>
            <param name="msg">The message to add.</param>
            <exception cref="T:System.InvalidOperationException">
            This is thrown if there are already <see cref="F:OpenUp.Networking.SessionConnection.ResendCache.MAX_CACHE_SIZE"/> messages that have been sent but
            not confirmed, meaning this connection is sending to much that is not arriving.
            </exception>
        </member>
        <member name="M:OpenUp.Networking.SessionConnection.ResendCache.GetCachedMessages">
            <summary>
            Returns the unconfirmed messages as a enumerable that can be <c>foreach</c>ed over.
            </summary>
        </member>
        <member name="F:OpenUp.Networking.SessionConnection.END_OF_MESSAGE">
            <summary>
            <para>
            Each message is preceded by an integer denoting the length of the message, and succeeded
            by this number.
            </para>
            <para>
            When a message is received, the preceding length int is read and the <see cref="F:OpenUp.Networking.SessionConnection.END_OF_MESSAGE"/>
            int is searched for by skipping over 'length' bytes, if the <see cref="F:OpenUp.Networking.SessionConnection.END_OF_MESSAGE"/> is not found,
            then the message is assumed to be fragmented and the read will await more data.
            </para>
            </summary>
        </member>
        <member name="F:OpenUp.Networking.SessionConnection.INT_SIZE">
            <summary>
            Const to avoid extra method calls
            </summary>
        </member>
        <member name="F:OpenUp.Networking.SessionConnection.MAX_MESSAGE_SIZE">
            <summary>
            Maximum size that a message can be.
            </summary>
        </member>
        <member name="F:OpenUp.Networking.SessionConnection.HandleMessage">
            <summary>
            Delegate that the received messages get passed to.
            </summary>
        </member>
        <member name="F:OpenUp.Networking.SessionConnection.RequestResend">
            <summary>
            Delegate that gets called when e resend is needed.
            </summary>
        </member>
        <member name="M:OpenUp.Networking.SessionConnection.#ctor(System.Net.Sockets.TcpClient)">
            <summary>
            Create a new session connection using an existing TCP connection.
            </summary>
            <param name="client"></param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:OpenUp.Networking.SessionConnection.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new session connection to a given host ip and port. 
            </summary>
            <param name="host">The host ip.</param>
            <param name="port">The port on the host.</param>
        </member>
        <member name="M:OpenUp.Networking.SessionConnection.ReadStream">
            <summary>
            <para>
            Reads the bytes from the <see cref="F:OpenUp.Networking.SessionConnection.networkStream"/> into a buffer, and then slices that
            up into messages that are passed to <see cref="F:OpenUp.Networking.SessionConnection.HandleMessage"/>.
            </para>
            <para>
            If a message has been fragmented (split up over multiple read instructions)
            then the parts are stored in a fragment storage buffer. The next time data is read,
            that data is concatenated to the end of the stored fragment.
            </para>
            </summary>
            <remarks>
            This method assumes that no messages larger than <see cref="F:OpenUp.Networking.SessionConnection.MAX_MESSAGE_SIZE"/> are being sent.
            </remarks>
        </member>
        <member name="M:OpenUp.Networking.SessionConnection.Close">
            <summary>
            Closes the TCP connection.
            </summary>
        </member>
        <member name="F:OpenUp.Redux.ArbitraryState.listeners">
            <summary>
            Collection of listeners to a specific field of the state.
            </summary>
        </member>
        <member name="P:OpenUp.Redux.ArbitraryState.Item(System.String)">
            <summary>
            Get the object stored under a given key.
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:OpenUp.Redux.ArbitraryState.#ctor">
            <summary>
            Create a new state object with a random id and empty starting values.
            </summary>
        </member>
        <member name="M:OpenUp.Redux.ArbitraryState.OnFieldChange(System.String,System.Action{System.Object})">
            <summary>
            Adds a listener that is only fired when the given field is changed.
            </summary>
            <param name="field">The name of the field</param>
            <param name="callback">What to do when the field changes, is given the new value as argument</param>
            <returns>Cleanup action that removes the listener</returns>
        </member>
        <member name="M:OpenUp.Redux.ArbitraryState.Get``1(System.String)">
            <summary>
            Get a specific field, cast to the given type.
            </summary>
            <param name="memb">The field to retrieve</param>
            <typeparam name="T">The type to cast to.</typeparam>
            <returns></returns>
        </member>
        <member name="M:OpenUp.Redux.ArbitraryState.Set(System.String,System.Int32)">
            <summary>
            Set a field to an <see cref="T:System.Int32"/> value
            </summary>
            <param name="memb"></param>
            <param name="value"></param>
        </member>
        <member name="M:OpenUp.Redux.ArbitraryState.Set(System.String,System.Single)">
            <summary>
            Set a field to an <see cref="T:System.Single"/> value
            </summary>
            <param name="memb"></param>
            <param name="value"></param>
        </member>
        <member name="M:OpenUp.Redux.ArbitraryState.Set(System.String,System.String)">
            <summary>
            Set a field to an <see cref="T:System.String"/> value
            </summary>
            <param name="memb"></param>
            <param name="value"></param>
        </member>
        <member name="M:OpenUp.Redux.ArbitraryState.Set(System.String,UnityEngine.Color)">
            <summary>
            Set a field to an <see cref="T:UnityEngine.Color"/> value
            </summary>
            <param name="memb"></param>
            <param name="value"></param>
        </member>
        <member name="M:OpenUp.Redux.ArbitraryState.Set(System.String,UnityEngine.Vector3)">
            <summary>
            Set a field to an <see cref="T:UnityEngine.Vector3"/> value
            </summary>
            <param name="memb"></param>
            <param name="value"></param>
        </member>
        <member name="M:OpenUp.Redux.ArbitraryState.Set(System.String,OpenUp.DataStructures.TransformStructure)">
            <summary>
            Set a field to an <see cref="T:OpenUp.DataStructures.TransformStructure"/> value
            </summary>
            <param name="memb"></param>
            <param name="value"></param>
        </member>
        <member name="T:OpenUp.Redux.AssetList.Reducer">
            <summary>
            The reducer for <see cref="T:OpenUp.Redux.AssetList.State"/>
            </summary>
        </member>
        <member name="M:OpenUp.Redux.AssetList.Reducer.GetInitial">
            <inheritdoc />
            <inheritdoc cref="!:IStateReducer.GetInitial"/>
        </member>
        <member name="M:OpenUp.Redux.AssetList.Reducer.Reduce(OpenUp.Redux.AssetList.State,OpenUp.Redux.IReduxAction)">
            <inheritdoc />
            <inheritdoc cref="!:IStateReducer.Reduce"/>
        </member>
        <member name="T:OpenUp.Redux.AssetList.ReduxActions">
            <summary>
            The actions to set the poly tab in the item library.
            </summary>
        </member>
        <member name="T:OpenUp.Redux.AssetList.ReduxActions.SearchAction">
            <summary>
            Action to search for some model on Poly
            </summary>
        </member>
        <member name="F:OpenUp.Redux.AssetList.ReduxActions.SearchAction.NAME">
            <summary>
            The action name.
            </summary>
        </member>
        <member name="P:OpenUp.Redux.AssetList.ReduxActions.SearchAction.name">
            <inheritdoc />
            <inheritdoc cref="P:OpenUp.Redux.IReduxAction.name"/>
        </member>
        <member name="P:OpenUp.Redux.AssetList.ReduxActions.SearchAction.term">
            <summary>
            The term to search for.
            </summary>
        </member>
        <member name="M:OpenUp.Redux.AssetList.ReduxActions.SearchAction.#ctor(System.String,OpenUp.Redux.AssetList.Reducer.SearchField)">
            <summary>
            Constructs a search action searching with the given term.
            </summary>
        </member>
        <member name="M:OpenUp.Redux.AssetList.ReduxActions.SearchAction.FromBinary(System.ArraySegment{System.Byte},OpenUp.Redux.IReduxAction@)">
            <inheritdoc />
            <inheritdoc cref="M:OpenUp.Redux.IReduxAction.FromBinary(System.ArraySegment{System.Byte},OpenUp.Redux.IReduxAction@)"/>
        </member>
        <member name="M:OpenUp.Redux.AssetList.ReduxActions.SearchPoly(System.String)">
            <summary>
            Creates a action to search for a given term.
            </summary>
        </member>
        <member name="M:OpenUp.Redux.AssetList.ReduxActions.SearchOpenUp(System.String)">
            <summary>
            Creates a action to search for a given term.
            </summary>
        </member>
        <member name="T:OpenUp.Redux.AssetList.State">
            <summary>
            State for the poly library.
            </summary>
        </member>
        <member name="P:OpenUp.Redux.AssetList.State.polySearchTerm">
            <summary>
            The term that should be searched for in Poly.
            </summary>
        </member>
        <member name="P:OpenUp.Redux.AssetList.State.openUpSearchTerm">
            <summary>
            The term that should be searched for in OpenUp.
            </summary>
        </member>
        <member name="P:OpenUp.Redux.AssetListState.polySearchTerm">
            <summary>
            The term that should be searched for in Poly.
            </summary>
        </member>
        <member name="P:OpenUp.Redux.AssetListState.openUpSearchTerm">
            <summary>
            The term that should be searched for in OpenUp.
            </summary>
        </member>
        <member name="T:OpenUp.Redux.ComplexVariableMenu.Reducer">
            <summary>
            The reducer for <see cref="T:OpenUp.Redux.ComplexVariableMenu.State"/>
            </summary>
        </member>
        <member name="M:OpenUp.Redux.ComplexVariableMenu.Reducer.GetInitial">
            <inheritdoc />
            <inheritdoc cref="!:IStateReducer.GetInitial"/>
        </member>
        <member name="M:OpenUp.Redux.ComplexVariableMenu.Reducer.Reduce(OpenUp.Redux.ComplexVariableMenu.State,OpenUp.Redux.IReduxAction)">
            <inheritdoc />
            <inheritdoc cref="!:IStateReducer.Reduce"/>
        </member>
        <member name="T:OpenUp.Redux.ComplexVariableMenu.ReduxActions">
            <summary>
            The actions to set the poly tab in the item library.
            </summary>
        </member>
        <member name="T:OpenUp.Redux.ComplexVariableMenu.ReduxActions.SetTargetVariableRedux">
            <summary>
            Action to search for some model on Poly
            </summary>
        </member>
        <member name="F:OpenUp.Redux.ComplexVariableMenu.ReduxActions.SetTargetVariableRedux.NAME">
            <summary>
            The action name.
            </summary>
        </member>
        <member name="P:OpenUp.Redux.ComplexVariableMenu.ReduxActions.SetTargetVariableRedux.name">
            <inheritdoc />
            <inheritdoc cref="P:OpenUp.Redux.IReduxAction.name"/>
        </member>
        <member name="P:OpenUp.Redux.ComplexVariableMenu.ReduxActions.SetTargetVariableRedux.variableType">
            <summary>
            The behaviour for which to set properties.
            </summary>
        </member>
        <member name="M:OpenUp.Redux.ComplexVariableMenu.ReduxActions.SetTargetVariableRedux.#ctor(System.String,OpenUp.DataStructures.ValueStructures.ValueType,OpenUp.DataStructures.ExpressionStructures.OUExpression)">
            <summary>
            Constructs an action to set the selected behaviour.
            </summary>
        </member>
        <member name="M:OpenUp.Redux.ComplexVariableMenu.ReduxActions.SetTargetVariableRedux.FromBinary(System.ArraySegment{System.Byte},OpenUp.Redux.IReduxAction@)">
            <inheritdoc />
            <inheritdoc cref="M:OpenUp.Redux.IReduxAction.FromBinary(System.ArraySegment{System.Byte},OpenUp.Redux.IReduxAction@)"/>
        </member>
        <member name="M:OpenUp.Redux.ComplexVariableMenu.ReduxActions.SetTargetVariable(System.String,OpenUp.DataStructures.ValueStructures.ValueType,OpenUp.DataStructures.ExpressionStructures.OUExpression)">
            <summary>
            Creates a action to set the selected behaviour.
            </summary>
        </member>
        <member name="F:OpenUp.Redux.ComplexVariableMenu.State.NAME">
            <summary>
            The name that this state is stored under.
            </summary>
        </member>
        <member name="T:OpenUp.Redux.EditingStory.Reducer">
            <summary>
            Reducer for <see cref="T:OpenUp.Redux.EditingStory.State"/>.
            </summary>
        </member>
        <member name="F:OpenUp.Redux.EditingStory.Reducer.NAME">
            <summary>
            The name for this reducer.
            </summary>
        </member>
        <member name="M:OpenUp.Redux.EditingStory.Reducer.GetInitial">
            <inheritdoc />
            <inheritdoc cref="!:IStateReducer.GetInitial"/>
        </member>
        <member name="M:OpenUp.Redux.EditingStory.Reducer.Reduce(OpenUp.Redux.EditingStory.State,OpenUp.Redux.IReduxAction)">
            <inheritdoc />
            <inheritdoc cref="!:IStateReducer.Reduce"/>
        </member>
        <member name="M:OpenUp.Redux.EditingStory.Reducer.AddMe">
            <summary>
            Adds this to the <see cref="T:OpenUp.Redux.StateManager"/>.
            </summary>
        </member>
        <member name="T:OpenUp.Redux.EditingStory.ReduxActions">
            <summary>
            Actions to change which nodes are action in the story.
            </summary>
        </member>
        <member name="T:OpenUp.Redux.EditingStory.ReduxActions.LoadObjectAction">
            <summary>
            Action to add a node as active.
            </summary>
        </member>
        <member name="F:OpenUp.Redux.EditingStory.ReduxActions.LoadObjectAction.NAME">
            <summary>
            The action name.
            </summary>
        </member>
        <member name="P:OpenUp.Redux.EditingStory.ReduxActions.LoadObjectAction.name">
            <inheritdoc />
            <inheritdoc cref="P:OpenUp.Redux.IReduxAction.name"/>
        </member>
        <member name="F:OpenUp.Redux.EditingStory.ReduxActions.LoadObjectAction.transform">
            <summary>
            The transform;
            </summary>
        </member>
        <member name="M:OpenUp.Redux.EditingStory.ReduxActions.LoadObjectAction.#ctor(System.String,OpenUp.DataStructures.TransformStructure)">
            <summary>
            Constructs an action to select a node.
            </summary>
        </member>
        <member name="M:OpenUp.Redux.EditingStory.ReduxActions.LoadObject(System.String,OpenUp.DataStructures.TransformStructure)">
            <summary>
            Creates an action to add a node.
            </summary>
        </member>
        <member name="T:OpenUp.Redux.EditingStory.State">
            <summary>
            State indicating which main story nodes are active in the editing mode.
            </summary>
        </member>
        <member name="F:OpenUp.Redux.EditingStory.State.loadCount">
            <summary>
            Incremented every time an object is loaded, used to avoid elementID conflicts.
            </summary>
        </member>
        <member name="F:OpenUp.Redux.EditingStory.State.INITIAL">
            <summary>
            The default starting value for this state.
            </summary>
        </member>
        <member name="P:OpenUp.Redux.EditingStoryState.loadedObjects">
            <summary>
            All the loaded objects in the scene.
            </summary>
        </member>
        <member name="P:OpenUp.Redux.EditingStoryState.loadCount">
            <summary>
            Incremented every time an object is loaded, used to avoid elementID conflicts.
            </summary>
        </member>
        <member name="M:OpenUp.Redux.EditingStoryState.LoadObject(System.String,OpenUp.DataStructures.TransformStructure)">
            <summary>
            Creates an action to add a node.
            </summary>
        </member>
        <member name="T:OpenUp.Redux.EventMenu.Reducer">
            <summary>
            The reducer for <see cref="T:OpenUp.Redux.EventMenu.State"/>
            </summary>
        </member>
        <member name="M:OpenUp.Redux.EventMenu.Reducer.GetInitial">
            <inheritdoc />
            <inheritdoc cref="!:IStateReducer.GetInitial"/>
        </member>
        <member name="M:OpenUp.Redux.EventMenu.Reducer.Reduce(OpenUp.Redux.EventMenu.State,OpenUp.Redux.IReduxAction)">
            <inheritdoc />
            <inheritdoc cref="!:IStateReducer.Reduce"/>
        </member>
        <member name="T:OpenUp.Redux.EventMenu.ReduxActions">
            <summary>
            The actions to set the active event
            </summary>
        </member>
        <member name="T:OpenUp.Redux.EventMenu.ReduxActions.SetEventRedux">
            <summary>
            Action to set the active event.
            </summary>
        </member>
        <member name="F:OpenUp.Redux.EventMenu.ReduxActions.SetEventRedux.NAME">
            <summary>
            The action name.
            </summary>
        </member>
        <member name="P:OpenUp.Redux.EventMenu.ReduxActions.SetEventRedux.name">
            <inheritdoc />
            <inheritdoc cref="P:OpenUp.Redux.IReduxAction.name"/>
        </member>
        <member name="P:OpenUp.Redux.EventMenu.ReduxActions.SetEventRedux.eventID">
            <summary>
            The behaviour for which to set properties.
            </summary>
        </member>
        <member name="M:OpenUp.Redux.EventMenu.ReduxActions.SetEventRedux.#ctor(System.String)">
            <summary>
            Constructs an action to set the selected event.
            </summary>
        </member>
        <member name="M:OpenUp.Redux.EventMenu.ReduxActions.SetEvent(System.String)">
            <summary>
            Creates a action to set the selected behaviour.
            </summary>
        </member>
        <member name="F:OpenUp.Redux.EventMenu.State.NAME">
            <summary>
            The name that this state is stored under.
            </summary>
        </member>
        <member name="M:OpenUp.Redux.EventMenuState.SetEvent(System.String)">
            <summary>
            Creates a action to set the selected behaviour.
            </summary>
        </member>
        <member name="T:OpenUp.Redux.ExpressionMenu.Reducer">
            <summary>
            The reducer for <see cref="T:OpenUp.Redux.ExpressionMenu.State"/>
            </summary>
        </member>
        <member name="M:OpenUp.Redux.ExpressionMenu.Reducer.GetInitial">
            <inheritdoc />
            <inheritdoc cref="!:IStateReducer.GetInitial"/>
        </member>
        <member name="M:OpenUp.Redux.ExpressionMenu.Reducer.Reduce(OpenUp.Redux.ExpressionMenu.State,OpenUp.Redux.IReduxAction)">
            <inheritdoc />
            <inheritdoc cref="!:IStateReducer.Reduce"/>
        </member>
        <member name="T:OpenUp.Redux.ExpressionMenu.ReduxActions">
            <summary>
            The actions to set the poly tab in the item library.
            </summary>
        </member>
        <member name="T:OpenUp.Redux.ExpressionMenu.ReduxActions.SetExpressionRedux">
            <summary>
            Action to search for some model on Poly
            </summary>
        </member>
        <member name="F:OpenUp.Redux.ExpressionMenu.ReduxActions.SetExpressionRedux.NAME">
            <summary>
            The action name.
            </summary>
        </member>
        <member name="P:OpenUp.Redux.ExpressionMenu.ReduxActions.SetExpressionRedux.name">
            <inheritdoc />
            <inheritdoc cref="P:OpenUp.Redux.IReduxAction.name"/>
        </member>
        <member name="M:OpenUp.Redux.ExpressionMenu.ReduxActions.SetExpressionRedux.#ctor(OpenUp.Updating.UpdatePath,OpenUp.DataStructures.ExpressionStructures.OUExpression,OpenUp.DataStructures.ValueStructures.ValueType)">
            <summary>
            Tells the ExpressionMenu which expression is being edited.
            </summary>
        </member>
        <member name="M:OpenUp.Redux.ExpressionMenu.ReduxActions.SetExpression(OpenUp.Updating.UpdatePath,OpenUp.DataStructures.ExpressionStructures.OUExpression,OpenUp.DataStructures.ValueStructures.ValueType)">
            <summary>
            Tells the ExpressionMenu which expression to edit..
            </summary>
        </member>
        <member name="M:OpenUp.Redux.ExpressionMenuState.SetExpression(OpenUp.Updating.UpdatePath,OpenUp.DataStructures.ExpressionStructures.OUExpression,OpenUp.DataStructures.ValueStructures.ValueType)">
            <summary>
            Tells the ExpressionMenu which expression to edit..
            </summary>
        </member>
        <member name="T:OpenUp.Redux.IState">
            <summary>
            Interface for all state structs for the redux. State should be
            immutable after they have been constructed, so that they can be passed
            to each consumer with the guarantee that the consumer cannot change
            any value.
            </summary>
        </member>
        <member name="T:OpenUp.Redux.IHasSearchTerm">
            <summary>
            Interface for searchable redux states.
            </summary>
        </member>
        <member name="T:OpenUp.Redux.IReduxAction">
            <summary>
            Interface for the actions for the redux. Passed to each
            reducer which uses the action to produce a new state.
            Like states, actions should be immutable after construction.
            </summary>
        </member>
        <member name="P:OpenUp.Redux.IReduxAction.name">
            <summary>
            the name of the action, this must be unique among redux actions.
            </summary>
        </member>
        <member name="M:OpenUp.Redux.IReduxAction.FromBinary(System.ArraySegment{System.Byte},OpenUp.Redux.IReduxAction@)">
            <summary>
            Converts some Binary to an action of this type.
            </summary>
        </member>
        <member name="T:OpenUp.Redux.IStateReducer`1">
            <summary>
            Interface for the reducers in the redux. Each reducer is given
            to the <see cref="T:OpenUp.Redux.StateManager"/> which passes each redux action
            dispatched to all reducers. 
            </summary>
        </member>
        <member name="M:OpenUp.Redux.IStateReducer`1.Reduce(`0,OpenUp.Redux.IReduxAction)">
            <summary>
            The key method for reducers. The method takes the current state for the
            reducers and an action, and returns a new state if it used the action.
            All actions <see cref="!:StateManager.DispatchAction">dispatched</see> get passed
            to this reducer.
            </summary>
            <param name="state">The current state for the reducer.</param>
            <param name="action">The action that should be applied.</param>
            <returns>The new state if it changed, otherwise the old state.</returns>
        </member>
        <member name="M:OpenUp.Redux.IStateReducer`1.GetInitial">
            <summary>
            Creates an initial state that should be used as starting point.
            </summary>
        </member>
        <member name="T:OpenUp.Redux.MenuContainers.Reducer">
            <summary>
            State for the Side Menu container.
            </summary>
        </member>
        <member name="F:OpenUp.Redux.MenuContainers.Reducer.NAME">
            <summary>
            The name for the state.
            </summary>
        </member>
        <member name="M:OpenUp.Redux.MenuContainers.Reducer.AddMe">
            <summary>
            Adds the state to the <see cref="T:OpenUp.Redux.StateManager"/>.
            </summary>
        </member>
        <member name="M:OpenUp.Redux.MenuContainers.Reducer.GetInitial">
            <inheritdoc />
            <inheritdoc cref="!:IStateReducer.GetInitial"/>
        </member>
        <member name="M:OpenUp.Redux.MenuContainers.Reducer.Reduce(OpenUp.Redux.MenuContainers.State,OpenUp.Redux.IReduxAction)">
            <inheritdoc />
            <inheritdoc cref="!:IStateReducer.Reduce"/>
        </member>
        <member name="T:OpenUp.Redux.MenuContainers.ReduxActions">
            <summary>
            Actions for the side menu container.
            </summary>
        </member>
        <member name="T:OpenUp.Redux.MenuContainers.ReduxActions.OpenHandleAction">
            <summary>
            Action to open the side menu on devices where it is pinned to the screen.
            </summary>
        </member>
        <member name="F:OpenUp.Redux.MenuContainers.ReduxActions.OpenHandleAction.NAME">
            <summary>
            The action name.
            </summary>
        </member>
        <member name="P:OpenUp.Redux.MenuContainers.ReduxActions.OpenHandleAction.name">
            <inheritdoc />
            <inheritdoc cref="P:OpenUp.Redux.IReduxAction.name"/>
        </member>
        <member name="P:OpenUp.Redux.MenuContainers.ReduxActions.OpenHandleAction.isOpen">
            <summary>
            Whether the menu should be opened.
            </summary>
        </member>
        <member name="M:OpenUp.Redux.MenuContainers.ReduxActions.OpenHandleAction.#ctor(System.Boolean)">
            <summary>
            Constructs a open side menu action.
            </summary>
            <param name="isOpen">True to open the menu, false to close it.</param>
        </member>
        <member name="M:OpenUp.Redux.MenuContainers.ReduxActions.ToggleHandle(System.Boolean)">
            <summary>
            Creates an action to open or close the side menu.
            </summary>
        </member>
        <member name="T:OpenUp.Redux.MenuContainers.State">
            <summary>
            State for the side menu.
            </summary>
        </member>
        <member name="F:OpenUp.Redux.MenuContainers.State.isOpen">
            <summary>
            Whether the side menu is open.
            </summary>
        </member>
        <member name="M:OpenUp.Redux.MenuContainerState.ToggleHandle(System.Boolean)">
            <summary>
            Tells the ExpressionMenu which expression to edit..
            </summary>
        </member>
        <member name="T:OpenUp.Redux.MenuStacks.Reducer">
            <summary>
            Reducer that handles the addition and removal of menus from a stack.
            <br/>
            An instance of this reducer is created for each stack of menus.
            </summary>
        </member>
        <member name="F:OpenUp.Redux.MenuStacks.Reducer.FULL_SCREEN_NAME">
            <summary>
            The name of the state of the full screen menu.
            </summary>
        </member>
        <member name="F:OpenUp.Redux.MenuStacks.Reducer.stackName">
            <summary>
            Name of the stack of menus that this reducer is for.
            </summary>
        </member>
        <member name="M:OpenUp.Redux.MenuStacks.Reducer.GetInitial">
            <inheritdoc />
            <inheritdoc cref="!:IStateReducer.GetInitial"/>
        </member>
        <member name="M:OpenUp.Redux.MenuStacks.Reducer.Reduce(OpenUp.Redux.MenuStacks.State,OpenUp.Redux.IReduxAction)">
            <inheritdoc />
            <inheritdoc cref="!:IStateReducer.Reduce"/>
        </member>
        <member name="T:OpenUp.Redux.MenuStacks.IMenuStackAction">
            <summary>
            Interface for all actions for the menu stack, the reducers use this
            to filter actions that are not for that specific stack.
            </summary>
        </member>
        <member name="P:OpenUp.Redux.MenuStacks.IMenuStackAction.stackName">
            <summary>
            The name of the stack that the action is for.
            </summary>
        </member>
        <member name="T:OpenUp.Redux.MenuStacks.ReduxActions">
            <summary>
            Actions that effect the menu stacks.
            </summary>
        </member>
        <member name="T:OpenUp.Redux.MenuStacks.ReduxActions.PopMenuAction">
            <summary>
            action to remove the top menu from the stack.
            </summary>
        </member>
        <member name="F:OpenUp.Redux.MenuStacks.ReduxActions.PopMenuAction.NAME">
            <summary>
            The action name.
            </summary>
        </member>
        <member name="P:OpenUp.Redux.MenuStacks.ReduxActions.PopMenuAction.name">
            <inheritdoc />
            <inheritdoc cref="P:OpenUp.Redux.IReduxAction.name"/>
        </member>
        <member name="T:OpenUp.Redux.MenuStacks.ReduxActions.AddMenuAction">
            <summary>
            Action to add a menu to the stack.
            </summary>
        </member>
        <member name="F:OpenUp.Redux.MenuStacks.ReduxActions.AddMenuAction.NAME">
            <summary>
            The action name.
            </summary>
        </member>
        <member name="P:OpenUp.Redux.MenuStacks.ReduxActions.AddMenuAction.name">
            <inheritdoc />
            <inheritdoc cref="P:OpenUp.Redux.IReduxAction.name"/>
        </member>
        <member name="F:OpenUp.Redux.MenuStacks.ReduxActions.AddMenuAction.menuName">
            <summary>
            The name of the menu to be added.
            </summary>
        </member>
        <member name="M:OpenUp.Redux.MenuStacks.ReduxActions.AddMenuAction.#ctor(System.String)">
            <summary>
            Constructs an action to add a menu to the stack
            </summary>
            <param name="stackName">The name of the stack this action is for.</param>
            <param name="menuName">The menu to add to the stack.</param>
        </member>
        <member name="T:OpenUp.Redux.MenuStacks.ReduxActions.ToggleMenuAction">
            <summary>
            Action to expand or collapse a menu.
            </summary>
        </member>
        <member name="F:OpenUp.Redux.MenuStacks.ReduxActions.ToggleMenuAction.NAME">
            <summary>
            The action name.
            </summary>
        </member>
        <member name="P:OpenUp.Redux.MenuStacks.ReduxActions.ToggleMenuAction.name">
            <inheritdoc />
            <inheritdoc cref="P:OpenUp.Redux.IReduxAction.name"/>
        </member>
        <member name="F:OpenUp.Redux.MenuStacks.ReduxActions.ToggleMenuAction.menuName">
            <summary>
            The name of the menu to be added.
            </summary>
        </member>
        <member name="M:OpenUp.Redux.MenuStacks.ReduxActions.ToggleMenuAction.#ctor(System.String)">
            <summary>
            Constructs an action to add a menu to the stack.
            </summary>
            <param name="stackName">The name of the stack this action is for.</param>
            <param name="menuName">The menu to add to the stack.</param>
        </member>
        <member name="T:OpenUp.Redux.MenuStacks.ReduxActions.SetStackAction">
            <summary>
            Action that sets the entire stack directly.
            </summary>
        </member>
        <member name="F:OpenUp.Redux.MenuStacks.ReduxActions.SetStackAction.NAME">
            <summary>
            The action name.
            </summary>
        </member>
        <member name="P:OpenUp.Redux.MenuStacks.ReduxActions.SetStackAction.name">
            <inheritdoc />
            <inheritdoc cref="P:OpenUp.Redux.IReduxAction.name"/>
        </member>
        <member name="F:OpenUp.Redux.MenuStacks.ReduxActions.SetStackAction.stack">
            <summary>
            The new stack value.
            </summary>
        </member>
        <member name="M:OpenUp.Redux.MenuStacks.ReduxActions.SetStackAction.#ctor(System.Collections.Generic.List{System.String})">
            <summary>
            Constructs an action to set the menu stack directly.
            </summary>
            <param name="stackName">The name of the stack.</param>
            <param name="stack">The new stack.</param>
        </member>
        <member name="M:OpenUp.Redux.MenuStacks.ReduxActions.PopMenu(System.String)">
            <summary>
            Creates an action to remove the last menu from the stack.
            </summary>
        </member>
        <member name="M:OpenUp.Redux.MenuStacks.ReduxActions.AddMenu(System.String)">
            <summary>
            Creates an action to add a menu to the stack
            </summary>
        </member>
        <member name="M:OpenUp.Redux.MenuStacks.ReduxActions.SetStack(System.Collections.Generic.List{System.String})">
            <summary>
            Creates an action to set the stack directly.
            </summary>
        </member>
        <member name="M:OpenUp.Redux.MenuStacks.ReduxActions.BackToMain">
            <summary>
            Creates an action that takes a menu stack back to the main menu.
            </summary>
        </member>
        <member name="T:OpenUp.Redux.MenuStacks.State">
            <summary>
            State that holds a stack of menus that are displayed on top of each other.
            </summary>
        </member>
        <member name="F:OpenUp.Redux.MenuStacks.State.stack">
            <summary>
            The stack of menu objects.
            </summary>
        </member>
        <member name="F:OpenUp.Redux.MenuStacks.State.INITIAL">
            <summary>
            The default starting value for this state.
            </summary>
        </member>
        <member name="M:OpenUp.Redux.MenuStackState.PopMenu">
            <summary>
            Creates an action to remove the last menu from the stack.
            </summary>
        </member>
        <member name="M:OpenUp.Redux.MenuStackState.AddMenu(System.String)">
            <summary>
            Creates an action to add a menu to the stack
            </summary>
        </member>
        <member name="M:OpenUp.Redux.MenuStackState.ToggleMenu(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenUp.Redux.MenuStackState.SetStack(System.Collections.Generic.List{System.String})">
            <summary>
            Creates an action to set the stack directly.
            </summary>
        </member>
        <member name="M:OpenUp.Redux.MenuStackState.BackToMain">
            <summary>
            Creates an action that takes a menu stack back to the main menu.
            </summary>
        </member>
        <member name="T:OpenUp.Redux.ObjectMenuDiscs.Reducer">
            <summary>
            The reducer for <see cref="T:OpenUp.Redux.ObjectMenuDiscs.State"/>
            </summary>
        </member>
        <member name="M:OpenUp.Redux.ObjectMenuDiscs.Reducer.GetInitial">
            <inheritdoc />
            <inheritdoc cref="!:IStateReducer.GetInitial"/>
        </member>
        <member name="M:OpenUp.Redux.ObjectMenuDiscs.Reducer.Reduce(OpenUp.Redux.ObjectMenuDiscs.State,OpenUp.Redux.IReduxAction)">
            <inheritdoc />
            <inheritdoc cref="!:IStateReducer.Reduce"/>
        </member>
        <member name="T:OpenUp.Redux.ObjectMenuDiscs.ReduxActions.SetEditModeRedux">
            <summary>
            Action to set the editing mode
            </summary>
        </member>
        <member name="F:OpenUp.Redux.ObjectMenuDiscs.ReduxActions.SetEditModeRedux.NAME">
            <summary>
            The action name.
            </summary>
        </member>
        <member name="P:OpenUp.Redux.ObjectMenuDiscs.ReduxActions.SetEditModeRedux.name">
            <inheritdoc />
            <inheritdoc cref="P:OpenUp.Redux.IReduxAction.name"/>
        </member>
        <member name="P:OpenUp.Redux.ObjectMenuDiscs.ReduxActions.SetEditModeRedux.editMode">
            <summary>
            The editing mode.
            </summary>
        </member>
        <member name="P:OpenUp.Redux.ObjectMenuDiscs.ReduxActions.SetEditModeRedux.currentItem">
            <summary>
            The menu to open.
            </summary>
        </member>
        <member name="P:OpenUp.Redux.ObjectMenuDiscs.ReduxActions.SetEditModeRedux.objectID">
            <summary>
            ID of the object that needs to respond to a state change.
            </summary>
        </member>
        <member name="M:OpenUp.Redux.ObjectMenuDiscs.ReduxActions.SetEditModeRedux.#ctor(OpenUp.Redux.ObjectMenuDiscs.EditingMode,System.String,System.Int32)">
            <summary>
            Constructs an action to set the selected editMode.
            </summary>
        </member>
        <member name="M:OpenUp.Redux.ObjectMenuDiscs.ReduxActions.SetEditMode(OpenUp.Redux.ObjectMenuDiscs.EditingMode)">
            <summary>
            Creates a action to set the selected edit mode.
            </summary>
        </member>
        <member name="M:OpenUp.Redux.ObjectMenuDiscs.ReduxActions.SetCurrentItem(OpenUp.Redux.ObjectMenuDiscs.EditingMode,System.String,System.Int32)">
            <summary>
            Creates a action to set the menu to open.
            </summary>
        </member>
        <member name="F:OpenUp.Redux.ObjectMenuDiscs.State.NAME">
            <summary>
            The name that this state is stored under.
            </summary>
        </member>
        <member name="M:OpenUp.Redux.EditingModeState.SetEditMode(OpenUp.Redux.ObjectMenuDiscs.EditingMode)">
            <summary>
            Creates a action to set the selected behaviour.
            </summary>
        </member>
        <member name="T:OpenUp.Redux.PropertyList.Reducer">
            <summary>
            The reducer for <see cref="T:OpenUp.Redux.PropertyList.State"/>
            </summary>
        </member>
        <member name="M:OpenUp.Redux.PropertyList.Reducer.GetInitial">
            <inheritdoc />
            <inheritdoc cref="!:IStateReducer.GetInitial"/>
        </member>
        <member name="M:OpenUp.Redux.PropertyList.Reducer.Reduce(OpenUp.Redux.PropertyList.State,OpenUp.Redux.IReduxAction)">
            <inheritdoc />
            <inheritdoc cref="!:IStateReducer.Reduce"/>
        </member>
        <member name="T:OpenUp.Redux.PropertyList.ReduxActions">
            <summary>
            The actions to set the poly tab in the item library.
            </summary>
        </member>
        <member name="T:OpenUp.Redux.PropertyList.ReduxActions.SetBehaviourRedux">
            <summary>
            Action to search for some model on Poly
            </summary>
        </member>
        <member name="F:OpenUp.Redux.PropertyList.ReduxActions.SetBehaviourRedux.NAME">
            <summary>
            The action name.
            </summary>
        </member>
        <member name="P:OpenUp.Redux.PropertyList.ReduxActions.SetBehaviourRedux.name">
            <inheritdoc />
            <inheritdoc cref="P:OpenUp.Redux.IReduxAction.name"/>
        </member>
        <member name="P:OpenUp.Redux.PropertyList.ReduxActions.SetBehaviourRedux.behaviour">
            <summary>
            The behaviour for which to set properties.
            </summary>
        </member>
        <member name="M:OpenUp.Redux.PropertyList.ReduxActions.SetBehaviourRedux.#ctor(System.String)">
            <summary>
            Constructs an action to set the selected behaviour.
            </summary>
        </member>
        <member name="M:OpenUp.Redux.PropertyList.ReduxActions.SetBehaviourRedux.#ctor(OpenUp.DataStructures.BehaviourType)">
            <summary>
            Constructs an action to set the selected behaviour.
            </summary>
        </member>
        <member name="M:OpenUp.Redux.PropertyList.ReduxActions.SetBehaviour(System.String)">
            <summary>
            Creates a action to set the selected behaviour.
            </summary>
        </member>
        <member name="M:OpenUp.Redux.PropertyList.ReduxActions.SetBehaviour(OpenUp.DataStructures.BehaviourType)">
            <summary>
            Creates a action to set the selected behaviour.
            </summary>
        </member>
        <member name="F:OpenUp.Redux.PropertyList.State.NAME">
            <summary>
            The name that this state is stored under.
            </summary>
        </member>
        <member name="M:OpenUp.Redux.PropertyListState.SetBehaviour(System.String)">
            <summary>
            Creates a action to set the selected behaviour.
            </summary>
        </member>
        <member name="M:OpenUp.Redux.PropertyListState.SetBehaviour(OpenUp.DataStructures.BehaviourType)">
            <summary>
            Creates a action to set the selected behaviour.
            </summary>
        </member>
        <member name="T:OpenUp.Redux.Solution.ReduxActions">
            <summary>
            Actions that relate to the loaded solution.
            </summary>
        </member>
        <member name="T:OpenUp.Redux.Solution.ReduxActions.NewAppAction">
            <summary>
            Action that tells the redux that a new solution has been loaded.
            </summary>
        </member>
        <member name="F:OpenUp.Redux.Solution.ReduxActions.NewAppAction.NAME">
            <summary>
            The action name.
            </summary>
        </member>
        <member name="P:OpenUp.Redux.Solution.ReduxActions.NewAppAction.name">
            <inheritdoc />
            <inheritdoc cref="P:OpenUp.Redux.IReduxAction.name"/>
        </member>
        <member name="M:OpenUp.Redux.Solution.ReduxActions.ClearApp">
            <summary>
            Action that tells the redux that a new solution has been loaded.
            </summary>
            <returns></returns>
        </member>
        <member name="T:OpenUp.Redux.StateManager">
            <summary>
            The main class for the redux implementation. Holds all states and reducers.
            <br/>
            Everything that listens to the state should do that using the
            <see cref="M:OpenUp.Redux.StateManager.AddListener``1(System.String,OpenUp.Redux.StateManager.StateConsumer{``0})"/> method of the <see cref="T:OpenUp.Redux.StateManager"/>
            </summary>
        </member>
        <member name="T:OpenUp.Redux.StateManager.BinaryToAction">
            <summary>
            Converts some binary to a redux action.
            </summary>
        </member>
        <member name="T:OpenUp.Redux.StateManager.RemoveConsumer">
            <summary>
            Removes a listener to the state.
            </summary>
        </member>
        <member name="T:OpenUp.Redux.StateManager.StateConsumer`1">
            <summary>
            Takes a state and uses it.
            </summary>
            <param name="state"></param>
            <typeparam name="T">The type of state.</typeparam>
            <remarks>The delegate is contravariant, which means that instances can be assigned to derived classes.</remarks>
        </member>
        <member name="T:OpenUp.Redux.StateManager.StateItems">
            <summary>
            Holds the data for a state.
            </summary>
        </member>
        <member name="F:OpenUp.Redux.StateManager.StateItems.reducer">
            <summary>
            The reducer for the state.
            </summary>
        </member>
        <member name="F:OpenUp.Redux.StateManager.StateItems.state">
            <summary>
            The current value of the state.
            </summary>
        </member>
        <member name="F:OpenUp.Redux.StateManager.StateItems.onChange">
            <summary>
            Event that is fired every time the state changes.
            </summary>
        </member>
        <member name="F:OpenUp.Redux.StateManager._instance">
            <summary>
            The lazy backing field for <see cref="P:OpenUp.Redux.StateManager.Instance"/>, creates the singleton.
            </summary>
        </member>
        <member name="P:OpenUp.Redux.StateManager.Instance">
            <summary>
            The singleton <see cref="T:OpenUp.Redux.StateManager"/>.
            </summary>
        </member>
        <member name="M:OpenUp.Redux.StateManager.Setup">
            <summary>
            Await this to interact with the StateManager before setup.
            </summary>
        </member>
        <member name="F:OpenUp.Redux.StateManager.binaryActionReaders">
            <summary>
            All the converters that convert binary sent via the websocket to redux actions.
            </summary>
        </member>
        <member name="F:OpenUp.Redux.StateManager.reducers">
            <summary>
            All the substates and their reducers in the redux.
            </summary>
        </member>
        <member name="F:OpenUp.Redux.StateManager.stateObjects">
            <summary>
            All the states known to the manager.
            </summary>
        </member>
        <member name="F:OpenUp.Redux.StateManager._history">
            <summary>
            All actions fired so far, used to sync shared sessions.
            </summary>
            <remarks>This is cleared if when syncing to another UISession.</remarks>
        </member>
        <member name="P:OpenUp.Redux.StateManager.history">
            <summary>
            All actions fired so far, used to sync shared sessions.
            </summary>
            <remarks>This is cleared if when syncing to another UISession.</remarks>
        </member>
        <member name="P:OpenUp.Redux.StateManager.isConnected">
            <summary>
            Whether the state manager is connected to a <see cref="T:OpenUp.Networking.Session"/>.
            </summary>
        </member>
        <member name="F:OpenUp.Redux.StateManager.isReconstructing">
            <summary>
            Whether the <see cref="T:OpenUp.Redux.StateManager"/> is in the process of syncing to
            another existing state.
            </summary>
        </member>
        <member name="F:OpenUp.Redux.StateManager.defferActionHandling">
            <summary>
            Instead of immediately handling state changes, stored the actions
            until <see cref="M:OpenUp.Redux.StateManager.FlushPendingActions"/> is called.
            </summary>
            <remarks>
            Use this to avoid Unity multithreading errors by setting this to true
            and calling <see cref="M:OpenUp.Redux.StateManager.FlushPendingActions"/> in an update loop.
            </remarks>
        </member>
        <member name="T:OpenUp.Redux.StateManager.OnStateChangeEvent">
            <summary>
            The event type for the state changes.
            </summary>
        </member>
        <member name="M:OpenUp.Redux.StateManager.AddState(System.String,OpenUp.Redux.IStateReducer{OpenUp.Redux.IState})">
            <summary>
            Adds a state to the redux so that it can be listened to.
            </summary>
            <param name="name">The name for the state.</param>
            <param name="reducer">The reducer fo the state.</param>
        </member>
        <member name="M:OpenUp.Redux.StateManager.FlushPendingActions">
            <summary>
            Reduces all actions that have been queued up until this point.
            </summary>
            <exception cref="T:System.NotSupportedException">
            This method relies on actions be defered until later, if <see cref="F:OpenUp.Redux.StateManager.defferActionHandling"/>
            is not set to true, then an error is thrown.
            </exception>
        </member>
        <member name="M:OpenUp.Redux.StateManager.AddListener``1(System.String,OpenUp.Redux.StateManager.StateConsumer{``0})">
            <summary>
            Adds a listener to some state that fires every time that state changes.
            </summary>
            <param name="name">The state's name.</param>
            <param name="consumer">The function that gets called every time the state changes.</param>
            <typeparam name="T">The type of state that is expected</typeparam>
            <exception cref="T:System.InvalidCastException">Thrown if the expected state type does not match to the type under the given name.</exception>
            <returns>A method that can be called to remove the listener.</returns>
            <remarks>The return method is the only way to remove the listener.</remarks>
        </member>
        <member name="M:OpenUp.Redux.StateManager.AsSafeConsumer``1(OpenUp.Redux.StateManager.StateConsumer{``0})">
            <summary>
            Creates a function that checks if the givens state is the correct type
            and gives a explicit exception when it is not.
            </summary>
            <param name="consumer">Uses a state.</param>
            <typeparam name="T">The type of <see cref="T:OpenUp.Redux.IState">state</see> expected.</typeparam>
            <returns>A generic action that can be added as listener to <see cref="F:OpenUp.Redux.StateManager.StateItems.onChange"/></returns>
        </member>
        <member name="M:OpenUp.Redux.StateManager.RemoveListener(System.String,UnityEngine.Events.UnityAction{OpenUp.Redux.IState})">
            <summary>
            Removes the listener from a state's onChange event.
            </summary>
            <param name="name">The state's name.</param>
            <param name="consumer">The listener.</param>
        </member>
        <member name="M:OpenUp.Redux.StateManager.GetState``1(System.String)">
            <summary>
            Returns the state stored under the given name cast to
            an expected type.
            </summary>
            <param name="name">The state's name</param>
            <typeparam name="T">The type of the state.</typeparam>
            <returns>The state.</returns>
            <exception cref="T:System.InvalidCastException">Thrown if the state is not the expected type.</exception>
        </member>
        <member name="M:OpenUp.Redux.StateManager.SendMessageToServer(OpenUp.Redux.StateMessage)">
            <summary>
            Sends a action to the server.
            </summary>
        </member>
        <member name="M:OpenUp.Redux.StateManager.GetHistory">
            <summary>
            Creates a JSON representation of all the actions that lead to the current state.
            </summary>
        </member>
        <member name="M:OpenUp.Redux.StateManager.SetFromHistory(System.Collections.Generic.List{OpenUp.Redux.StateMessage})">
            <summary>
            Recreate the state of some other UI session by playing all actions
            in that state's history on a clean history.
            </summary>
            <param name="newHistory">Array of action to play.</param>
        </member>
        <member name="T:OpenUp.Redux.StoryBoard.Reducer">
            <summary>
            The reducer for the storyboard.
            </summary>
        </member>
        <member name="M:OpenUp.Redux.StoryBoard.Reducer.GetInitial">
            <inheritdoc />
            <inheritdoc cref="!:IStateReducer.GetInitial"/>
        </member>
        <member name="M:OpenUp.Redux.StoryBoard.Reducer.Reduce(OpenUp.Redux.StoryBoard.State,OpenUp.Redux.IReduxAction)">
            <inheritdoc />
            <inheritdoc cref="!:IStateReducer.Reduce"/>
        </member>
        <member name="T:OpenUp.Redux.StoryBoard.ReduxActions">
            <summary>
            Actions for the storyboard.
            </summary>
        </member>
        <member name="T:OpenUp.Redux.StoryBoard.ReduxActions.SetIDAction">
            <summary>
            Action to set the story being edited in the story board.
            </summary>
        </member>
        <member name="F:OpenUp.Redux.StoryBoard.ReduxActions.SetIDAction.NAME">
            <summary>
            The action name.
            </summary>
        </member>
        <member name="P:OpenUp.Redux.StoryBoard.ReduxActions.SetIDAction.name">
            <inheritdoc />
            <inheritdoc cref="P:OpenUp.Redux.IReduxAction.name"/>
        </member>
        <member name="F:OpenUp.Redux.StoryBoard.ReduxActions.SetIDAction.id">
            <summary>
            The id of the story to be edited.
            </summary>
        </member>
        <member name="M:OpenUp.Redux.StoryBoard.ReduxActions.SetIDAction.#ctor(System.String)">
            <summary>
            Construct an action to set the story to be edited.
            </summary>
        </member>
        <member name="M:OpenUp.Redux.StoryBoard.ReduxActions.SetID(System.String)">
            <summary>
            Creates an action to set the story id.
            </summary>
        </member>
        <member name="T:OpenUp.Redux.StoryBoard.State">
            <summary>
            The state of the storyboard.
            </summary>
        </member>
        <member name="F:OpenUp.Redux.StoryBoard.State.id">
            <summary>
            The id of the loaded story in the story board.
            </summary>
        </member>
        <member name="F:OpenUp.Redux.StoryBoard.State.INITIAL">
            <summary>
            The default starting value for this state.
            </summary>
        </member>
        <member name="M:OpenUp.Redux.StoryBoardState.SetID(System.String)">
            <summary>
            Creates a action to set the selected behaviour.
            </summary>
        </member>
    </members>
</doc>
